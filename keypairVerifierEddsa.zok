import "ecc/edwardsAdd" as add;
import "ecc/edwardsScalarMult" as multiply;
import "utils/pack/bool/nonStrictUnpack256" as unpack256;
from "ecc/babyjubjubParams" import BabyJubJubParams;
import "ecc/babyjubjubParams.code" as context;
import "./publicKeyList" as publicKeyList;


// Save public key list in a variable
const field[10][2] pubKeyList = publicKeyList();


def main(private field privKey) -> field {

    BabyJubJubParams context = context();   // Generate curve parameters
    field[2] G = [context.Gu, context.Gv];  // Get parameter vlaues of base point G

    bool[256] privKeyBits = unpack256(privKey);  // binary encoding of private Key with a length of 256 bits
    field[2] pubKey = multiply(privKeyBits, G, context);  // calculate public Key from private Key

    field mut result = 0;

    // iterate through public key list
    for u32 i in 0..10 {
        // check if public key is included in list 
        result = if pubKey[0] == pubKeyList[i][0] && pubKey[1] == pubKeyList[i][1] {1} else {result};
    }  
    
    return result;
}

// 5406141598975088696144699008760408187583441857012693422636262514979414131332 1877902466313726057948460290452275215682741354751472712487045846146965080374