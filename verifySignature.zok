

// import "./sha256.zok" as sha256;
// import "./publicKeyList.zok" as pubKeyList;

import "hashes/sha256/512bitPacked" as sha256packed;

// list with 10 different public keys. Public keys are field[2] elements
const field[10][2] pubKeyList = [            
    [198107114953173143621706604524159071681, 135440954687583320068363251631828834302], 
    [52145535709950365779907065727005311828, 209066964618679861906818763051682012104],
    [45324487246557938747332883189457400843, 84478852209878349000735790184433475398], // == sha256packed([0, 0, 0, 97])
    [52145535709950365779907065727005311820, 209066964618679861906818763051682012100],
    [52145535709950365779907065727005311821, 209066964618679861906818763051682012101],
    [52145535709950365779907065727005311822, 209066964618679861906818763051682012102],
    [52145535709950365779907065727005311823, 209066964618679861906818763051682012103],
    [52145535709950365779907065727005311824, 209066964618679861906818763051682012104],
    [52145535709950365779907065727005311825, 209066964618679861906818763051682012105],
    [52145535709950365779907065727005311826, 209066964618679861906818763051682012106]
  ];


def main(private field privKey) -> field {

    // calculate hash digest of private Key
    field[2] hash  = sha256packed([0, 0, 0, privKey]);

    field mut result = 0;

    // iterate through public key list
    for u32 i in 0..10 {
      // check whether private key hash digest matches public key
      result = if hash[0] == pubKeyList[i][0] && hash[1] == pubKeyList[i][1] {1} else {result};
    }
    return result;
}


/*
Procedure for checking whether private key matches public key from public-key-list:
- sign something with private key 
- verify signature with pubKey

- three inputs: private field privKey, field signature, field[n] pubKeyList
- 
*/